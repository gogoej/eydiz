<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="main">
	<select id="listCategory" resultType="com.eydiz.main.ProjectCategory">
		SELECT categoryNo, parentCategoryNo, categoryName, ImageUrl
		FROM project_category
		WHERE parentCategoryNo IS NOT NULL
	</select>
	
	<select id="listCategoryOfFunding" resultType="com.eydiz.main.ProjectCategory">
		SELECT categoryNo, parentCategoryNo, categoryName, ImageUrl
		FROM project_category
		WHERE parentCategoryNo = 1
	</select>
	
	<select id="selectCategoryName" parameterType="Integer" resultType="String">
		SELECT categoryName
		FROM project_category
		WHERE categoryNo=#{categoryNo}
	</select>
	
	<!-- 나중에 WHERE조건까지 추가하기 -->
	<select id="fundingDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM project
		WHERE statusNo=5
					AND FLOOR(projectEndDate - SYSDATE) >= 0
		<if test="categoryNo != null and categoryNo > 0">
			AND p.categoryNo = #{categoryNo}
		</if>
	</select>
	
	<!-- approvalDate를 구할 때는 JOIN을 하는 것이 맞지만, 이전에 승인없이 테스트하던 자료를 살려두기 위해서 
	임의로 left outer join을 사용하여 null을 반환하여 1990-01-01로 날짜를 지정하도록 하였음.-->
	<select id="listFunding" parameterType="map" resultType="com.eydiz.studio.Project">
		SELECT 
			p.projectNo, p.brandNo, brandName, p.categoryNo, categoryName, projectName, 
			projectImageUrl, projectGoalAmount, projectAttainAmount, 
			projectEndDate, statusNo,
			FLOOR(projectEndDate - SYSDATE) remainDays,
			NVL(likeCount, 0) likeCount,
			NVL(supportCount, 0) supportCount,
			NVL(communityCount, 0) communityCount,
			NVL(newsCount, 0) newsCount,
			NVL(totalAmount, 0) totalAmount,
			NVL(totalAmount,0)/projectGoalAmount attainRate,
			NVL(approvalDate, TO_DATE('1990-01-01')) approvalDate 
		FROM
			project p
		JOIN brand b ON p.brandNo = b.brandNo
		JOIN project_category pc ON p.categoryNo = pc.categoryNo
		LEFT OUTER JOIN (
			SELECT projectNo, COUNT(*) likeCount
			FROM project_like
			GROUP BY projectNo
		) pl ON pl.projectNo = p.projectNo
        LEFT OUTER JOIN (
			SELECT DISTINCT projectNo, count(DISTINCT memberNo) over(partition by projectNo) supportCount 
			FROM reward_buy_overview ro
            LEFT OUTER JOIN  reward_buy_cancel rc ON ro.buyNo = rc.buyNo
			WHERE cancelNo IS NULL
		) sc ON sc.projectNo = p.projectNo
		LEFT OUTER JOIN (
            SELECT projectNo, count(*) communityCount
            FROM project_community
            WHERE parentCommentNo IS NULL
            GROUP BY projectNo
        ) pc ON pc.projectNo = p.projectNo
        LEFT OUTER JOIN (
        	SELECT projectNo, count(*) newsCount
        	FROM project_news
        	GROUP BY projectNo
        ) pn ON pn.projectNo = p.projectNo
        LEFT OUTER JOIN(
            SELECT DISTINCT projectNo, SUM(totalAmount) OVER(PARTITION BY projectNo) totalAmount
            FROM reward_buy_overview ro
            LEFT OUTER JOIN reward_buy_cancel rc ON rc.buyNo = ro.buyNo
            WHERE rc.cancelNo IS NULL
        ) ro ON ro.projectNo = p.projectNo
        LEFT OUTER JOIN (
        	SELECT projectNo, created approvalDate
            FROM project_status_list
            WHERE statusNo=5
        ) psl ON psl.projectNo = p.projectNo
		WHERE
			statusNo=5
			AND FLOOR(projectEndDate - SYSDATE) >= 0
			<if test="categoryNo != null and categoryNo > 0">
			AND p.categoryNo = #{categoryNo}
			</if>
		ORDER BY 
		approvalDate DESC
		,(
			totalAmount*0.2 +
			supportCount*0.3 + 
			attainRate*0.2 +
			newsCount*0.1 +
			communityCount*0.1 + 
			likeCount*0.1
		) DESC
		, projectNo DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	
</mapper>