<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="detail">
	<!-- 프로젝트 정보 불러오기 -->
	<select id="readProject" parameterType="map" resultType="com.eydiz.studio.Project">
		SELECT 
			p.projectNo, p.categoryNo, categoryName, projectName, projectStatusMemo, projectImageUrl, projectGoalAmount, 
			projectCreatedDate, projectUpdatedDate, 
			TO_CHAR(projectStartDate, 'YYYYMMDD') projectStartDate, TO_CHAR(projectEndDate,'YYYYMMDD') projectEndDate, 
			statusNo, projectSummary, projectStory, 
			p.brandNo, brandName, managerName, managerEmail, managerPhone,
			memberImageUrl,
			TRUNC(projectEndDate - SYSDATE) remainDays,
			NVL(likeCount,0) likeCount,
			NVL(supportCount, 0) supportCount,
			NVL(communityCount, 0) communityCount,
			NVL(newsCount, 0) newsCount,
			NVL(totalAmount, 0) totalAmount,
			NVL(totalAmount,0)/projectGoalAmount attainRate
			<if test="memberNo!=null and memberNo>0">
			,NVL(myLikeCount, 0) myLikeCount
			</if>
		FROM project p
		LEFT OUTER JOIN (
			SELECT projectNo, COUNT(*) likeCount
			FROM project_like
			GROUP BY projectNo
		) pl ON pl.projectNo = p.projectNo
		<if test="memberNo!=null and memberNo>0">
		LEFT OUTER JOIN (
			SELECT projectNo, COUNT(*) myLikeCount
			FROM project_like
			WHERE memberNo = #{memberNo}
			GROUP BY projectNo
		) ml ON ml.projectNo = p.projectNo
		</if>
		LEFT OUTER JOIN (
			SELECT DISTINCT projectNo, count(DISTINCT memberNo) over(partition by projectNo) supportCount 
			FROM reward_buy_overview ro
            LEFT OUTER JOIN  reward_buy_cancel rc ON ro.buyNo = rc.buyNo
			WHERE cancelNo IS NULL AND projectNo=#{projectNo}
		) sc ON sc.projectNo = p.projectNo
		LEFT OUTER JOIN (
            SELECT projectNo, count(*) communityCount
            FROM project_community
            WHERE projectNo = #{projectNo} AND parentCommentNo IS NULL
            GROUP BY projectNo
        ) pc ON pc.projectNo = p.projectNo
        LEFT OUTER JOIN (
        	SELECT projectNo, count(*) newsCount
        	FROM project_news
        	WHERE projectNo = #{projectNo}
        	GROUP BY projectNo
        ) pn ON pn.projectNo = p.projectNo
        LEFT OUTER JOIN(
            SELECT DISTINCT projectNo, SUM(totalAmount) OVER(PARTITION BY projectNo) totalAmount
            FROM reward_buy_overview ro
            LEFT OUTER JOIN reward_buy_cancel rc ON rc.buyNo = ro.buyNo
            WHERE projectNo = #{projectNo} AND rc.cancelNo IS NULL
        ) ro ON ro.projectNo = p.projectNo
		JOIN brand b ON p.brandNo = b.brandNo
		JOIN project_category pc ON p.categoryNo = pc.categoryNo
		JOIN member_detail md ON md.memberNo = b.memberNo
		WHERE p.projectNo = #{projectNo} AND (statusNo=5 OR statusNo=6)
	</select>
	
	<!-- 프로젝트 목록에 해당하는 리워드 번호 불러오기 -->
	<select id="listReward" parameterType="Integer" resultType="com.eydiz.studio.Reward">
		SELECT rewardNo, r.projectNo, amount, rewardTitle, rewardContent, rewardOption, 
			isShipping, shipAmount, TO_CHAR(startShippingDate, 'YYYY-MM-DD') startShippingDate, limitQuantity, remainQuantity
		FROM reward r
		JOIN project p ON r.projectNo = p.projectNo
		WHERE r.projectNo = #{projectNo}
		ORDER BY amount 
	</select>
	
	<!-- 리워드 읽기 -->
	<select id="readReward" parameterType="Integer" resultType="com.eydiz.studio.Reward">
		SELECT rewardNo, r.projectNo, projectName, amount, rewardTitle, rewardContent, rewardOption, 
			isShipping, shipAmount, TO_CHAR(startShippingDate, 'YYYY-MM-DD') startShippingDate, limitQuantity, remainQuantity
		FROM reward r
		JOIN project p ON r.projectNo = p.projectNo
		WHERE r.rewardNo= #{rewardNo}
		ORDER BY amount 
	</select>
	
	<!-- 인기 프로젝트: 일단 끝나는 날이 가장 미래인 순으로 정렬 -->
	<select id="listPopularProject" resultType="com.eydiz.studio.Project">
		SELECT 
			projectNo, p.categoryNo, categoryName, projectName, projectStatusMemo, projectImageUrl, projectGoalAmount, 
			projectCreatedDate, projectUpdatedDate, 
			TO_CHAR(projectStartDate, 'YYYYMMDD') projectStartDate, TO_CHAR(projectEndDate,'YYYYMMDD') projectEndDate, 
			statusNo, projectSummary, projectStory,
			p.brandNo, brandName, managerName, managerEmail, managerPhone
		FROM project p
		JOIN brand b ON p.brandNo = b.brandNo
		JOIN project_category pc ON p.categoryNo = pc.categoryNo
		WHERE statusNo = 5
		ORDER BY projectEndDate DESC
		OFFSET 0 ROWS FETCH FIRST 10 ROWS ONLY
	</select>
	
	<!-- 좋아요 활성화/비활성화 -->
	<select id="projectLikeCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM project_like
		WHERE projectNo=#{projectNo}
	</select>
	
	<select id="myProjectLikeCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM project_like
		WHERE projectNo=#{projectNo} AND memberNo=#{memberNo}
	</select>
	
	<insert id="insertProjectLike" parameterType="map">
		INSERT INTO project_like(projectNo, memberNo)
		VALUES (#{projectNo}, #{memberNo})
	</insert>
	
	<delete id="deleteProjectLike" parameterType="map">
		DELETE FROM project_like
		where projectNo=#{projectNo} AND memberNo=#{memberNo}
	</delete>
	
	<!-- 커뮤니티 댓글 조회하기 -->
	<select id="selectCommunityComment" parameterType="Integer" resultType="com.eydiz.studio.ProjectCommunity">
		SELECT commentNo, pc.parentCommentNo, pc.projectNo, pc.memberId, memberNickname, content, createdDate, 
					memberImageUrl, NVL(replyCount, 0) replyCount
		FROM project_community pc
		JOIN member_detail m ON m.memberId = pc.memberId
		LEFT OUTER JOIN(
			SELECT parentCommentNo, count(*) replyCount
			FROM project_community
            GROUP BY parentCommentNo
		) parentCmt ON parentCmt.parentCommentNo = commentNo
		WHERE pc.projectNo= #{projectNo} AND pc.parentCommentNo IS NULL
		ORDER BY commentNo DESC
	</select>
	
	<!-- 커뮤니티 답글 조회하기 -->
	<select id="selectCommunityCommentReply" parameterType="map" resultType="com.eydiz.studio.ProjectCommunity">
		SELECT commentNo, parentCommentNo, pc.projectNo, pc.memberId, memberNickname, content, createdDate,
					memberImageUrl
		FROM project_community pc
		JOIN member_detail m ON m.memberId = pc.memberId
		WHERE pc.projectNo= #{projectNo}
		AND parentCommentNo =#{parentCommentNo}
		ORDER BY commentNo
	</select>
	
	<!-- 커뮤니티 댓글 작성하기 / 삭제하기 -->
	<insert id="insertCommunity" parameterType="com.eydiz.studio.ProjectCommunity">
		INSERT INTO project_community(commentNo, parentCommentNo, projectNo, memberId, content, createdDate)
		VALUES(project_community_seq.NEXTVAL, #{parentCommentNo, jdbcType=INTEGER}, #{projectNo}, #{memberId}, #{content}, SYSDATE)
	</insert>
	
	<!-- 커뮤니티 댓글 수정하기 -->
	<update id="updateCommunity" parameterType="com.eydiz.studio.ProjectCommunity">
		UPDATE project_community
		SET content=#{content}
		WHERE commentNo = #{commentNo} AND memberId=#{memberId}
	</update>
	
	<!-- 커뮤니티 댓글 삭제하기 -->
	<delete id="deleteCommunity" parameterType="com.eydiz.studio.ProjectCommunity">
		DELETE FROM project_community 
		WHERE commentNo=#{commentNo} AND memberId=#{memberId}
	</delete>
	
</mapper>